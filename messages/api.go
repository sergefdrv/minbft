// Copyright (c) 2019 NEC Laboratories Europe GmbH.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package messages defines interface for the protocol messages.
//
// Note that some interfaces are "sealed" with unexported methods.
// This ensures the desired semantic of type assertions/switches with
// those interfaces.
//
// To fulfill a sealed interface in another package, the new type
// needs to explicitly embed a dedicated type that implements the
// interface's unexported methods. For example, consider the following
// definition of a sealed interface:
//
// 	package api
//
//	type Sealed interface {
// 		DoSomething()
// 		isSealed()
// 	}
//
//	type IsSealed struct{}
//
//	func (IsSealed) isSealed() {}
//
// A proper way to fulfill the Sealed interface in another package is
// to define the new type like follows:
//
//	package mysealed
//
// 	type MySealed struct {
// 		api.IsSealed
// 		// ...
// 	}
//
//	func (*MySealed) DoSomething() { /* ... */ }
//
package messages

import (
	"encoding"
)

// MessageImpl provides an implementation of the message representation.
type MessageImpl interface {
	NewFromBinary(data []byte) (Message, error)
	NewRequest(clientID uint32, sequence uint64, operation []byte) Request
	NewPrepare(replicaID uint32, view uint64, request Request) Prepare
	NewCommit(replicaID uint32, prepare Prepare) Commit
	NewReply(replicaID, clientID uint32, sequence uint64, result []byte) Reply
}

type Message interface {
	encoding.BinaryMarshaler
}

// ClientMessage represents a message generated by a client.
type ClientMessage interface {
	Message
	ClientID() uint32

	isClientMessage() // "seal" the interface
}

// IsClientMessage implements unexported methods of ClientMessage.
type IsClientMessage struct{}

func (IsClientMessage) isClientMessage() {} //nolint:unused

// ReplicaMessage represents a message generated by a replica.
//
// EmbeddedMessages method returns a sequence of messages embedded
// into this one.
type ReplicaMessage interface {
	Message
	ReplicaID() uint32

	isReplicaMessage() // "seal" the interface
}

// IsReplicaMessage implements unexported methods of ReplicaMessage.
type IsReplicaMessage struct{}

func (IsReplicaMessage) isReplicaMessage() {} //nolint:unused

// CertifiedMessage represents a message certified with a UI.
//
// CertifiedPayload returns the serialized message content certified
// by its UI.
type CertifiedMessage interface {
	ReplicaMessage
	CertifiedPayload() []byte
	UIBytes() []byte
	SetUIBytes(ui []byte)
}

// SignedMessage represents a message signed with a normal signature.
//
// SginedPayload returns serialized message content signed with its
// signature.
type SignedMessage interface {
	SignedPayload() []byte
	Signature() []byte
	SetSignature(signature []byte)
}

type Request interface {
	ClientMessage
	SignedMessage
	Sequence() uint64
	Operation() []byte

	isRequest() // "seal" the interface
}

// IsRequest implements unexported methods of Request.
type IsRequest struct{ IsClientMessage }

func (IsRequest) isRequest() {} //nolint:unused

type Prepare interface {
	CertifiedMessage
	View() uint64
	Request() Request

	isPrepare() // "seal" the interface
}

// IsPrepare implements unexported methods of Prepare.
type IsPrepare struct{ IsReplicaMessage }

func (IsPrepare) isPrepare() {} //nolint:unused

type Commit interface {
	CertifiedMessage
	Prepare() Prepare

	isCommit() // "seal" the interface
}

// IsCommit implements unexported methods of Commit.
type IsCommit struct{ IsReplicaMessage }

func (IsCommit) isCommit() {} //nolint:unused

type Reply interface {
	ReplicaMessage
	SignedMessage
	ClientID() uint32
	Sequence() uint64
	Result() []byte

	isReply() // "seal" the interface
}

// IsReply implements unexported methods of Reply.
type IsReply struct{ IsReplicaMessage }

func (IsReply) isReply() {} //nolint:unused
